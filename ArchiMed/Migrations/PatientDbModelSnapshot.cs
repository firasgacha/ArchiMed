// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArchiMed.Migrations
{
    [DbContext(typeof(PatientDb))]
    partial class PatientDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArchiMed.Models.Consultation", b =>
                {
                    b.Property<int>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConsultationId"));

                    b.Property<DateTime>("DateRendezVous")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MedecinFk")
                        .HasColumnType("integer");

                    b.Property<int>("PatientFk")
                        .HasColumnType("integer");

                    b.HasKey("ConsultationId");

                    b.HasIndex("MedecinFk");

                    b.HasIndex("PatientFk");

                    b.ToTable("Consultation");
                });

            modelBuilder.Entity("ArchiMed.Models.DossierMedical", b =>
                {
                    b.Property<int>("NumeroDossier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NumeroDossier"));

                    b.Property<int>("PatientFk")
                        .HasColumnType("integer");

                    b.HasKey("NumeroDossier");

                    b.HasIndex("PatientFk");

                    b.ToTable("DossierMedical");
                });

            modelBuilder.Entity("ArchiMed.Models.Medecin", b =>
                {
                    b.Property<int>("MedecinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MedecinId"));

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("chefDeProjet")
                        .HasColumnType("boolean");

                    b.Property<int>("cin")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("mdp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("naissance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("pays")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("specialite")
                        .HasColumnType("integer");

                    b.Property<int>("telephone")
                        .HasColumnType("integer");

                    b.Property<string>("ville")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("zipcode")
                        .HasColumnType("integer");

                    b.HasKey("MedecinId");

                    b.ToTable("Medecin");
                });

            modelBuilder.Entity("ArchiMed.Models.Medicaments", b =>
                {
                    b.Property<int>("MedicamentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MedicamentsId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeBarre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Composition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContreIndications")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateFabrication")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Effets")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrdenanceId")
                        .HasColumnType("integer");

                    b.Property<string>("Prix")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MedicamentsId");

                    b.HasIndex("OrdenanceId");

                    b.ToTable("Medicaments");
                });

            modelBuilder.Entity("ArchiMed.Models.Ordenance", b =>
                {
                    b.Property<int>("OrdenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrdenanceId"));

                    b.Property<int>("DossierMedicalFk")
                        .HasColumnType("integer");

                    b.Property<int>("MedecinFk")
                        .HasColumnType("integer");

                    b.Property<string>("OrdenanceDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrdenanceDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrdenanceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrdenanceId");

                    b.HasIndex("DossierMedicalFk");

                    b.HasIndex("MedecinFk");

                    b.ToTable("Ordenance");
                });

            modelBuilder.Entity("ArchiMed.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DossierMedicalFk")
                        .HasColumnType("integer");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("cin")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("mdp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("naissance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("pays")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ville")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("zipcode")
                        .HasColumnType("integer");

                    b.HasKey("PatientId");

                    b.HasIndex("DossierMedicalFk");

                    b.ToTable("Patients");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Patient");
                });

            modelBuilder.Entity("ArchiMed.Models.Radio", b =>
                {
                    b.Property<int>("RadioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RadioId"));

                    b.Property<int>("DossierMedicalFk")
                        .HasColumnType("integer");

                    b.Property<string>("RadioDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RadioImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RadioName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RadioType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RadioUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RadioId");

                    b.HasIndex("DossierMedicalFk");

                    b.ToTable("Radio");
                });

            modelBuilder.Entity("ArchiMed.Models.Scanner", b =>
                {
                    b.Property<int>("ScannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScannerId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DossierMedicalFk")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScannerImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScannerType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScannerUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ScannerId");

                    b.HasIndex("DossierMedicalFk");

                    b.ToTable("Scanner");
                });

            modelBuilder.Entity("ArchiMed.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("ChefServiceFk")
                        .HasColumnType("integer");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ServiceId");

                    b.HasIndex("ChefServiceFk");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("MedecinService", b =>
                {
                    b.Property<int>("MedecinsListMedecinId")
                        .HasColumnType("integer");

                    b.Property<int>("ServicesListServiceId")
                        .HasColumnType("integer");

                    b.HasKey("MedecinsListMedecinId", "ServicesListServiceId");

                    b.HasIndex("ServicesListServiceId");

                    b.ToTable("MedecinService");
                });

            modelBuilder.Entity("ArchiMed.Models.ChefService", b =>
                {
                    b.HasBaseType("ArchiMed.Models.Patient");

                    b.Property<int>("ServiceFk")
                        .HasColumnType("integer");

                    b.HasIndex("ServiceFk");

                    b.HasDiscriminator().HasValue("ChefService");
                });

            modelBuilder.Entity("ArchiMed.Models.Consultation", b =>
                {
                    b.HasOne("ArchiMed.Models.Medecin", "Medecin")
                        .WithMany("ConsultationList")
                        .HasForeignKey("MedecinFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArchiMed.Models.Patient", "Patient")
                        .WithMany("ConsultationList")
                        .HasForeignKey("PatientFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medecin");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ArchiMed.Models.DossierMedical", b =>
                {
                    b.HasOne("ArchiMed.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ArchiMed.Models.Medicaments", b =>
                {
                    b.HasOne("ArchiMed.Models.Ordenance", null)
                        .WithMany("MedicamentsList")
                        .HasForeignKey("OrdenanceId");
                });

            modelBuilder.Entity("ArchiMed.Models.Ordenance", b =>
                {
                    b.HasOne("ArchiMed.Models.DossierMedical", "DossierMedical")
                        .WithMany("OrdenanceList")
                        .HasForeignKey("DossierMedicalFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArchiMed.Models.Medecin", "Medecin")
                        .WithMany("OrdenanceList")
                        .HasForeignKey("MedecinFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DossierMedical");

                    b.Navigation("Medecin");
                });

            modelBuilder.Entity("ArchiMed.Models.Patient", b =>
                {
                    b.HasOne("ArchiMed.Models.DossierMedical", "DossierMedical")
                        .WithMany()
                        .HasForeignKey("DossierMedicalFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DossierMedical");
                });

            modelBuilder.Entity("ArchiMed.Models.Radio", b =>
                {
                    b.HasOne("ArchiMed.Models.DossierMedical", "DossierMedical")
                        .WithMany("RadiosList")
                        .HasForeignKey("DossierMedicalFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DossierMedical");
                });

            modelBuilder.Entity("ArchiMed.Models.Scanner", b =>
                {
                    b.HasOne("ArchiMed.Models.DossierMedical", "DossierMedical")
                        .WithMany("ScannersList")
                        .HasForeignKey("DossierMedicalFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DossierMedical");
                });

            modelBuilder.Entity("ArchiMed.Models.Service", b =>
                {
                    b.HasOne("ArchiMed.Models.ChefService", "ChefService")
                        .WithMany()
                        .HasForeignKey("ChefServiceFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChefService");
                });

            modelBuilder.Entity("MedecinService", b =>
                {
                    b.HasOne("ArchiMed.Models.Medecin", null)
                        .WithMany()
                        .HasForeignKey("MedecinsListMedecinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArchiMed.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesListServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArchiMed.Models.ChefService", b =>
                {
                    b.HasOne("ArchiMed.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ArchiMed.Models.DossierMedical", b =>
                {
                    b.Navigation("OrdenanceList");

                    b.Navigation("RadiosList");

                    b.Navigation("ScannersList");
                });

            modelBuilder.Entity("ArchiMed.Models.Medecin", b =>
                {
                    b.Navigation("ConsultationList");

                    b.Navigation("OrdenanceList");
                });

            modelBuilder.Entity("ArchiMed.Models.Ordenance", b =>
                {
                    b.Navigation("MedicamentsList");
                });

            modelBuilder.Entity("ArchiMed.Models.Patient", b =>
                {
                    b.Navigation("ConsultationList");
                });
#pragma warning restore 612, 618
        }
    }
}
